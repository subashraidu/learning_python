I'll explain the different types of loops in Python and their use cases with practical examples.

```python
# 1. For Loops
def for_loop_examples():
    # 1.1 Basic for loop with list
    print("1. Basic for loop with list:")
    fruits = ['apple', 'banana', 'orange']
    for fruit in fruits:
        print(f"Processing fruit: {fruit}")
    
    # 1.2 For loop with range
    print("\n2. For loop with range:")
    for i in range(3):  # 0 to 2
        print(f"Count: {i}")
    
    # 1.3 For loop with start, stop, step
    print("\n3. For loop with start, stop, step:")
    for i in range(2, 10, 2):  # Even numbers from 2 to 8
        print(f"Even number: {i}")
    
    # 1.4 For loop with enumerate
    print("\n4. For loop with enumerate:")
    tasks = ['backup', 'update', 'cleanup']
    for index, task in enumerate(tasks):
        print(f"Task {index + 1}: {task}")
    
    # 1.5 For loop with dictionary
    print("\n5. For loop with dictionary:")
    server_status = {'web': 'active', 'db': 'maintenance'}
    for server, status in server_status.items():
        print(f"Server {server} is {status}")

# 2. While Loops
def while_loop_examples():
    # 2.1 Basic while loop
    print("1. Basic while loop:")
    count = 0
    while count < 3:
        print(f"Count is: {count}")
        count += 1
    
    # 2.2 While loop with break
    print("\n2. While loop with break:")
    attempts = 0
    while True:
        attempts += 1
        if attempts == 3:
            print("Breaking loop")
            break
        print(f"Attempt: {attempts}")
    
    # 2.3 While loop with continue
    print("\n3. While loop with continue:")
    num = 0
    while num < 5:
        num += 1
        if num == 3:
            continue  # Skip printing 3
        print(f"Number: {num}")

# 3. Nested Loops
def nested_loop_examples():
    # 3.1 Nested for loops
    print("1. Nested for loops:")
    servers = ['web', 'db']
    actions = ['start', 'stop']
    for server in servers:
        for action in actions:
            print(f"Performing {action} on {server}")
    
    # 3.2 Nested while loops
    print("\n2. Nested while loops:")
    x = 0
    while x < 2:
        y = 0
        while y < 2:
            print(f"Position: ({x}, {y})")
            y += 1
        x += 1

# 4. Loop Control Statements
def loop_control_examples():
    # 4.1 Break statement
    print("1. Break statement example:")
    for i in range(5):
        if i == 3:
            print("Breaking loop")
            break
        print(f"Value: {i}")
    
    # 4.2 Continue statement
    print("\n2. Continue statement example:")
    for i in range(5):
        if i == 2:
            print("Skipping 2")
            continue
        print(f"Value: {i}")
    
    # 4.3 Pass statement
    print("\n3. Pass statement example:")
    for i in range(3):
        if i == 1:
            pass  # Do nothing
        else:
            print(f"Value: {i}")

# 5. List Comprehension (Alternative to loops)
def list_comprehension_examples():
    # 5.1 Basic list comprehension
    numbers = [1, 2, 3, 4, 5]
    squares = [num ** 2 for num in numbers]
    print("1. Squares:", squares)
    
    # 5.2 List comprehension with condition
    even_squares = [num ** 2 for num in numbers if num % 2 == 0]
    print("\n2. Even squares:", even_squares)
    
    # 5.3 Nested list comprehension
    matrix = [[1, 2], [3, 4]]
    flattened = [num for row in matrix for num in row]
    print("\n3. Flattened matrix:", flattened)

# Real-world examples
def practical_examples():
    # Example 1: File processing
    def process_log_file():
        log_entries = [
            "ERROR: Connection failed",
            "INFO: Server started",
            "WARNING: High memory usage"
        ]
        
        # Using for loop to process logs
        error_logs = []
        for entry in log_entries:
            if entry.startswith("ERROR"):
                error_logs.append(entry)
    
    # Example 2: Server monitoring
    def monitor_servers():
        server_status = {'web': True, 'db': True, 'cache': False}
        retry_count = 0
        max_retries = 3
        
        # Using while loop for retry logic
        while retry_count < max_retries:
            if all(server_status.values()):
                print("All servers are up")
                break
            print(f"Retry attempt {retry_count + 1}")
            retry_count += 1
    
    # Example 3: Batch processing
    def batch_process():
        items = list(range(1, 101))
        batch_size = 10
        
        # Using range with step for batch processing
        for i in range(0, len(items), batch_size):
            batch = items[i:i + batch_size]
            print(f"Processing batch: {batch}")

if __name__ == "__main__":
    print("For Loop Examples:")
    for_loop_examples()
    print("\nWhile Loop Examples:")
    while_loop_examples()
    print("\nNested Loop Examples:")
    nested_loop_examples()
    print("\nLoop Control Examples:")
    loop_control_examples()
    print("\nList Comprehension Examples:")
    list_comprehension_examples()

```

Let me explain each type of loop and when to use them:

1. For Loops:
   Use when:
   - You know the number of iterations in advance
   - Iterating over a sequence (list, tuple, string)
   - Processing each item in a collection

```python
# Example 1: Iterating over a list
for item in list:
    process(item)

# Example 2: Using range
for i in range(5):
    print(i)

# Example 3: With enumerate
for index, value in enumerate(list):
    print(f"{index}: {value}")
```

2. While Loops:
   Use when:
   - Number of iterations is unknown
   - Loop depends on a condition
   - Implementing retry logic
   - Event handling

```python
# Example 1: Condition-based loop
while condition:
    do_something()

# Example 2: Retry logic
while attempts < max_attempts:
    try_operation()
```

3. Nested Loops:
   Use when:
   - Working with multi-dimensional data
   - Complex iterations
   - Matrix operations

```python
# Example: Processing a matrix
for row in matrix:
    for element in row:
        process(element)
```

4. Loop Control Statements:

a) Break:
   Use when:
   - Need to exit loop early
   - Found what you're looking for
   - Error condition met

```python
for item in items:
    if error_condition:
        break
```

b) Continue:
   Use when:
   - Want to skip current iteration
   - Filtering items
   - Avoiding nested if statements

```python
for item in items:
    if skip_condition:
        continue
    process(item)
```

5. List Comprehensions:
   Use when:
   - Creating new list based on existing one
   - Simple transformations
   - Filtering elements

```python
# Example 1: Simple transformation
squares = [x**2 for x in numbers]

# Example 2: Filtering
evens = [x for x in numbers if x % 2 == 0]
```

Best Practices:

1. Choose the Right Loop:
```python
# For known iterations
for i in range(10):
    print(i)

# For unknown iterations
while not condition_met:
    check_condition()
```

2. Avoid Infinite Loops:
```python
# Always ensure loop condition can be met
while True:
    if exit_condition:
        break
```

3. Use Appropriate Control Flow:
```python
# Using continue for filtering
for item in items:
    if not valid(item):
        continue
    process(item)
```

4. Consider Performance:
```python
# List comprehension is often faster
squares = [x**2 for x in range(1000)]

# Instead of
squares = []
for x in range(1000):
    squares.append(x**2)
```

Would you like me to provide more specific examples for any of these loop types or explain any concept in more detail?
